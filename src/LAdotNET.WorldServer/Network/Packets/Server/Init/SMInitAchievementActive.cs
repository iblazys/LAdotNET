// This file is part of LAdotNET.
//
// LAdotNET is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LAdotNET is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY, without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with LAdotNET.  If not, see <https://www.gnu.org/licenses/>.

using LAdotNET.Network;
using LAdotNET.Network.Packets;
using System;
using System.Threading.Tasks;

namespace LAdotNET.WorldServer.Network.Packets.Server.Init
{
    class SMInitAchievementActive : Packet
    {
        private int PacketCount { get; set; }

        public SMInitAchievementActive(Connection connection, int type) : base(connection)
        {
            CompressionType = CompressionType.SNAPPY;
            OpCode = PacketFactory.ReverseLookup[GetType()];
            PacketCount = type;
        }

        // Dunno what this does yet
        // 1.6.2.3 - 1.6.4.1 no change
        public override void Deserialize()
        {
            if (PacketCount == 0)
            {
                Data.WriteBytes(new byte[]
                {
                    0x00, 0x00, 0x18, 0x00, 0xA0, 0xD2, 0x1E, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C,
                    0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xD2, 0x1E, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00,
                    0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xD2, 0x1E, 0x00, 0x03, 0x01,
                    0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xD2, 0x1E,
                    0x00, 0x04, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0xA0, 0xD2, 0x1E, 0x00, 0x05, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0xFA, 0x14, 0x2E, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17,
                    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x14, 0x2E, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0x00,
                    0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x14, 0x2E, 0x00, 0x03, 0x01, 0x00,
                    0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x7E, 0x3D, 0x00,
                    0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
                    0x7E, 0x3D, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x39, 0x7E, 0x3D, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x7E, 0x3D, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
                    0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x7E, 0x3D, 0x00, 0x01, 0x01, 0x00, 0x01,
                    0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x7E, 0x3D, 0x00, 0x01,
                    0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x7E,
                    0x3D, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x3E, 0x7E, 0x3D, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x3F, 0x7E, 0x3D, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C,
                    0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7E, 0x3D, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00,
                    0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x72, 0x4C, 0x00, 0x01, 0x01,
                    0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x72, 0x4C,
                    0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x50, 0x72, 0x4C, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x50, 0x72, 0x4C, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x17,
                    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x72, 0x4C, 0x00, 0x05, 0x01, 0x00, 0x01, 0x00, 0x00,
                    0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xBD, 0x98, 0x00, 0x01, 0x01, 0x00,
                    0x01, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
                });
            }

            if(PacketCount == 1)
            {
                Data.WriteBytes(new byte[]
                {
                    0x23, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x05, 0x05, 0x00,
                    0x00, 0x06, 0x00, 0x00, 0x07, 0x00, 0x00, 0x08, 0x00, 0x00, 0x09, 0x00, 0x01, 0x0A, 0x00, 0x04,
                    0x0B, 0x00, 0x00, 0x0C, 0x00, 0x05, 0x0D, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x0F, 0x00, 0x05, 0x10,
                    0x00, 0x05, 0x11, 0x00, 0x22, 0x12, 0x00, 0x00, 0x13, 0x00, 0x05, 0x14, 0x00, 0x05, 0x15, 0x00,
                    0x01, 0x16, 0x00, 0x01, 0x17, 0x00, 0x01, 0x18, 0x00, 0x05, 0x19, 0x00, 0x00, 0x1A, 0x00, 0x0D,
                    0x1B, 0x00, 0x59, 0x1C, 0x00, 0x01, 0x1D, 0x00, 0x00, 0x1E, 0x00, 0x01, 0x1F, 0x00, 0x01, 0x20,
                    0x00, 0x00, 0x21, 0x00, 0x01, 0x22, 0x00, 0x01, 0x23, 0x00, 0x05, 0x00, 0x00
                });
            }
        }

        public override Task HandleAsync()
        {
            throw new NotImplementedException();
        }

        public override void Serialize()
        {
            throw new NotImplementedException();
        }
    }
}
