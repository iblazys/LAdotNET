using LAdotNET.Network;
using LAdotNET.Network.Packets;
using System;
using System.Threading.Tasks;

namespace LAdotNET.WorldServer.Network.Packets.Server.Init
{
    class SMInitLifeSkill : Packet
    {
        public SMInitLifeSkill(Connection connection) : base(connection)
        {
            CompressionType = CompressionType.SNAPPY;
            OpCode = PacketFactory.ReverseLookup[GetType()];
        }

        public override void Deserialize()
        {
            Data.WriteBytes(new byte[]
            {
                0x00, 0x00, 0x00, 0x18, 0x00, 0x70, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x12, 0x01, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x12, 0x01, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x12, 0x01,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
                0x12, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x9C, 0x12, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xF6, 0x12, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xF7, 0x12, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x12, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0x12, 0x01, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x12, 0x01, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0x12, 0x01,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
                0x12, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x13, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x5A, 0x13, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x13, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x13, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x13, 0x01, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x13, 0x01, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x13, 0x01,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF,
                0x13, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xC0, 0x13, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xC1, 0x13, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x17, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
            });
        }

        public override Task HandleAsync()
        {
            throw new NotImplementedException();
        }

        public override void Serialize()
        {
            throw new NotImplementedException();
        }
    }
}
